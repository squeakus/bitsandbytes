import cv2, sys
import numpy as np

def main():
    if len(sys.argv) < 2:
        print "usage: python edgedetector.py <imagename>"
        exit()

    # read in the image as color and greyscale
    colorimg = cv2.imread(sys.argv[1],1)
    img = cv2.imread(sys.argv[1],0)
    find_edges(img, colorimg)

def find_edges(img, colorimg):
    '''Canny edge detector finds all edges in an image. The 
    user is required to specify the type of edge they are looking for.
    '''
    #Start with all edges
    edges = cv2.Canny(img,0,0)

    # Create a black image, a window
    cv2.namedWindow('Edges')

    # create trackbars for edge params
    cv2.createTrackbar('Min','Edges',0,1000,nothing)
    cv2.createTrackbar('Max','Edges',0,1000,nothing)

    while(1):
        # get current positions of four trackbars
        edgemin = cv2.getTrackbarPos('Min','Edges')
        edgemax = cv2.getTrackbarPos('Max','Edges')
        edges = cv2.Canny(img,edgemin,edgemax)
        cv2.imshow('Edges',edges)

        # check keypress, if esc quit, if space generate contours
        k = cv2.waitKey(1) & 0xFF
        if k == 27:
            break
        if k == 32:
            generate_contours(edges, colorimg, img)


    cv2.destroyAllWindows()


def generate_contours(edges, colorimg, img):
    '''Use the binary image generated by the edge detector to create
    contours (lines). The user can further filter the contours by area
    and length'''
    cv2.destroyAllWindows()
    cv2.namedWindow('Contours')
    lengthlimit = 20
    arealimit = 20 

    # create trackbars for length and area filters
    cv2.createTrackbar('length','Contours',0,200,nothing)
    cv2.createTrackbar('area','Contours',0,2000,nothing)
 
    # find all possible contours in the image
    ret,thresh = cv2.threshold(edges,127,255,0)
    contours, hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)

    while(1):
        cv2.imshow('Contours', colorimg)

        #filter based on area and length
        lengthlimit = cv2.getTrackbarPos('length','Contours')
        arealimit = cv2.getTrackbarPos('area','Contours')

        for idx, contour in enumerate(contours):
            if len(contour) > lengthlimit:
                area = cv2.contourArea(contour)
                if area > arealimit:
                    isconvex = cv2.isContourConvex(contour)
                    circle = cv2.minEnclosingCircle(contour)
                    cv2.drawContours(colorimg,contours,idx,(0,255,0),2)
                else:
                    cv2.drawContours(colorimg,contours,idx,(0,0,255),2)
            else:
                cv2.drawContours(colorimg,contours,idx,(0,0,255),2)

        k = cv2.waitKey(1) & 0xFF
        #print k
        if k == 27:
            exit()
        if k == 32:
            show_final(colorimg, contours, arealimit, lengthlimit)

def show_final(colorimg, contours, arealimit, lengthlimit):
    cv2.destroyAllWindows()
    for idx, contour in enumerate(contours):
        if len(contour) > lengthlimit:
            area = cv2.contourArea(contour)
            if area > arealimit:
                cv2.drawContours(colorimg,contours,idx,(0,0,0),2)
    
    cv2.imshow('Final Contours',colorimg)

def nothing(x):
    pass


if __name__=='__main__':
    main()
